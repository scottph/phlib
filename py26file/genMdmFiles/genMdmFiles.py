#!/usr/bin/python3.1

import os
import sys
import re


spreadsheet1Done = 0
savedRowHashValid = 0
savedRowHash = {}
firstValidOid = 1
gOid = firstValidOid


IGDRootObjRef
profileToValidStringsHash = {}
profileToFileHandleHash = {}
allValidStrings = {}
allVSArefs = []
objProfilesArray = []

def usage():
    print("Usage: genMdmFiles.py [command] [path_to_CommEngine_dir] < cmsCfg.xml")
    print("both arguments are mandatory.")
    print("command is: objectid, object, stringtable, mdm, prototypes, or skeletons")


def autogen_warning(fileObj):
    fileObj.write("/*\n")
    fileObj.write(" * This file is automatically generated from the data-model spreadsheet.\n")
    fileObj.write(" * Do not modify this file directly - You will lose all your changes the\n")
    fileObj.write(" * next time this file is generated!\n")
    fileObj.write(" */\n\n\n")


def doxygen_header(fileObj):
    fileObj.write("/*!\\file %s \n" % fileObj.name)
    fileObj.write(" * \\brief Automatically generated header file %s\n" % fileObj.name)
    fileObj.write(" */\n\n\n")



# note this!! ph+
def parse_object_line(hashref, validLine):

    print("parsing object line: %s" % validLine)

    # remove all entries from hashref
    hashref = {}

    hashref["type"] = "object";

    
    #$line =~ /name="([\w.{}-]+)"/;
    tmp = re.match('(?<=name=")[\w.{}-]+', validLine)
    hashref["name"] = tmp.group(0)

    tmp = re.match('(?<=shortObjectName=")[\w]+]', validLine)
    hashref["shortObjectName"] = tmp.group(0)

    tmp = re.match('(?<=specSource=")[\w]+', validLine)
    hashref["specSource"] = tmp.group(0)

    tmp = re.match('(?<=profile=")[\w:]+', validLine)
    hashref["profile"] = tmp.group(0)

    if not hashref["profile"]:     
       print("could not extract profile for %s" % hashref["profile"])
       sys.exit()
    

    tmp = re.match('(?<=requirements=")[\w]+', validLine)
    hashref["requirements"] = tmp.group(0)

    tmp = re.match('(?<=supportLevel=")[\w]+', validLine)
    hashref["supportLevel"] = tmp.group(0)

#
    if tmp = re.match('(?<=hideObjectFromAcs="[\w]+', validLine):
        hashref["hideObjectFromAcs"] = tmp.group(0)
    

    if tmp = re.match('(?<=pruneWriteToConfigFile=")[\w]+', validLine):    
        hashref["pruneWriteToConfigFile"] = tmp.group(0)
    




# Parse a line in the data model file.
# Fill in the given reference to a hash with attributes found in the line.
def parse_row(validLine,hashRef)
    i = 0
    endRowMarkerFound=0
    gotLine=0

    print("starting parse_row, validLine=%s " % validLine)

    if 1 == spreadsheet1Done :
        return 0    

    #$_ = <STDIN>;

    if re.match('\w', '<vsaInfo>'):        
#        print "Begin vsaInfo tag found, end parse_row\n";
        spreadsheet1Done = 1
        return 0

#    if !defined($_):        
#        print("end of file detected\n")
#        return 0        

    if re.match('\w', '<\/xmlMandatorySingleRootNode>/'):
        print "end tag detected... ";
        return 0;
        

    # We are only interested in rows that begin with object or parameter.
    # so NO descript!!!....ph+
    if re.match('\w', '<object/'):
        parse_object_line(hashref, validLine)
        return 1        

#    if re.match('\w', '<parameter/'):        
#        parse_parameter_line(hashref, validLine)
#        return 1      
    
    print("impossible!  reached end of parse_row")





# Top Level function for creating MdmObjectId's
def output_mdmObjectIdFile(fileObj):
    rowHash = {}
    objName = ""
    objid = firstValidOid

    foreach eachLine in fileObj:
        validLine = eachLine.strip()
        if not validLine:
            continue

        parse_row(validLine, rowHash)

        if (rowHash["type"] == "object") and (rowHash["supportLevel"] != "NotSupported"):
            if rowHash["shortObjectName"] == "None":
                objName = convert_fullyQualifiedObjectName(rowHash["name"])
            else
                objName = convert_shortObjectName(rowHash["shortObjectName"])


            fileObj.write("/*! \\brief %s */ \n" % rowHash["name"])
            fileObj.write("#define MDMOID_%s  %s\n\n" % % objName objid)
            objid += 1
   

    objid -= 1

    fileObj.write("/*! \\brief maximum OID value */\n")
    fileObj.write("#define MDM_MAX_OID $objid\n\n")
    


#main start...

if len(sys.argv) < 3:
    usage()
    sys.exit()

if "objectid" != sys.argv[1] or "cmsCfg.xml" != sys.argv[2]:
    usage
    sys.exit()

try:
    cfgFile = open("cmsCfg.xml", 'r')
except IOError:
    print("fail to open cmsCfg.xml")
    sys.exit()


#
if "objectid" == sys.argv[1]:
    try:
        objIdFile = open("mdmObjId.h", 'w')
    except IOError:
        print("fail to open mdmObjId.h")
        sys.exit()

    
    objIdFile.write("#ifndef __MDM_OBJECTID_H__\n")
    objIdFile.write("#define __MDM_OBJECTID_H__\n\n\n")

    autogen_warning(objIdFile)

    doxygen_header(objIdFile)

    output_mdmObjectIdFile(objIdFile)

    objIdFile.write("\n\n#endif /* __MDM_OBJECTID_H__ */\n")
    
print("done...")
